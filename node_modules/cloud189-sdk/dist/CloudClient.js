"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _CloudClient_accessToken, _CloudClient_builLoginForm, _CloudClient_sortParameter, _CloudClient_getSignature;
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = __importDefault(require("url"));
const node_jsencrypt_1 = __importDefault(require("node-jsencrypt"));
const crypto_1 = __importDefault(require("crypto"));
const got_1 = __importDefault(require("got"));
const tough_cookie_1 = require("tough-cookie");
const cookieJar = new tough_cookie_1.CookieJar();
const config = {
    clientId: "538135150693412",
    model: "KB2000",
    version: "9.0.6",
};
const headers = {
    "User-Agent": `Mozilla/5.0 (Linux; U; Android 11; ${config.model} Build/RP1A.201005.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36 Ecloud/${config.version} Android/30 clientId/${config.clientId} clientModel/${config.model} clientChannelId/qq proVersion/1.0.6`,
    Referer: "https://m.cloud.189.cn/zhuanti/2016/sign/index.jsp?albumBackupOpened=1",
    "Accept-Encoding": "gzip, deflate",
    Host: "cloud.189.cn",
};
class CloudClient {
    constructor(username, password) {
        _CloudClient_accessToken.set(this, "");
        this.getEncrypt = () => got_1.default.post("https://open.e.189.cn/api/logbox/config/encryptConf.do").json();
        this.redirectURL = () => new Promise((resolve, reject) => {
            got_1.default
                .get("https://cloud.189.cn/api/portal/loginUrl.action?redirectURL=https://cloud.189.cn/web/redirect.html?returnURL=/main.action")
                .then((res) => {
                const { query } = url_1.default.parse(res.url, true);
                resolve(query);
            })
                .catch((e) => reject(e));
        });
        this.appConf = (query) => got_1.default
            .post("https://open.e.189.cn/api/logbox/oauth2/appConf.do", {
            headers: {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/76.0",
                Referer: "https://open.e.189.cn/",
                lt: query.lt,
                REQID: query.reqId,
            },
            form: { version: "2.0", appKey: query.appId },
        })
            .json();
        _CloudClient_builLoginForm.set(this, (encrypt, appConf) => {
            const jsencrypt = new node_jsencrypt_1.default();
            const keyData = `-----BEGIN PUBLIC KEY-----\n${encrypt.pubKey}\n-----END PUBLIC KEY-----`;
            jsencrypt.setPublicKey(keyData);
            const usernameEncrypt = Buffer.from(jsencrypt.encrypt(this.username), "base64").toString("hex");
            const passwordEncrypt = Buffer.from(jsencrypt.encrypt(this.password), "base64").toString("hex");
            const data = {
                appKey: "cloud",
                version: "2.0",
                accountType: "01",
                mailSuffix: "@189.cn",
                validateCode: "",
                captchaToken: "",
                dynamicCheck: "FALSE",
                clientType: "1",
                cb_SaveName: "0",
                isOauth2: false,
                returnUrl: appConf.returnUrl,
                paramId: appConf.paramId,
                userName: `${encrypt.pre}${usernameEncrypt}`,
                password: `${encrypt.pre}${passwordEncrypt}`,
            };
            return data;
        });
        _CloudClient_sortParameter.set(this, (data) => {
            if (!data) {
                return "";
            }
            const e = Object.entries(data).map((t) => t.join("="));
            e.sort((a, b) => (a > b ? 1 : a < b ? -1 : 0));
            return e.join("&");
        });
        _CloudClient_getSignature.set(this, (data) => {
            const parameter = __classPrivateFieldGet(this, _CloudClient_sortParameter, "f").call(this, data);
            return crypto_1.default.createHash("md5").update(parameter).digest("hex");
        });
        /**
         * 登录流程
         * 1.获取公钥
         * 2.获取登录参数
         * 3.获取登录地址
         * 4.跳转到登录页
         * */
        this.login = () => new Promise((resolve, reject) => {
            Promise.all([
                //1.获取公钥
                this.getEncrypt(),
                //2.获取登录参数
                this.redirectURL().then((query) => {
                    this.cacheQuery = query;
                    return this.appConf(query);
                }),
            ])
                .then((res) => {
                const encrypt = res[0].data;
                const appConf = res[1].data;
                const data = __classPrivateFieldGet(this, _CloudClient_builLoginForm, "f").call(this, encrypt, appConf);
                //3.获取登录地址
                return got_1.default
                    .post("https://open.e.189.cn/api/logbox/oauth2/loginSubmit.do", {
                    headers: {
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/76.0",
                        Referer: "https://open.e.189.cn/",
                        REQID: this.cacheQuery.REQID,
                        lt: this.cacheQuery.lt,
                    },
                    form: data,
                })
                    .json();
            })
                .then((res) => {
                // 4.跳转到登录页
                if (res.result !== 0) {
                    reject(res.msg);
                }
                else {
                    return got_1.default
                        .get(res.toUrl, { headers, cookieJar })
                        .then((r) => resolve(r.statusCode));
                }
            })
                .catch((e) => reject(e));
        });
        this.fetchAPI = (task) => {
            const q = url_1.default.parse(task, true);
            return got_1.default
                .get(task, {
                headers: Object.assign(Object.assign({}, headers), { Host: q.host }),
                cookieJar,
            })
                .json();
        };
        this.getUserSizeInfo = () => {
            return got_1.default
                .get("https://cloud.189.cn/api/portal/getUserSizeInfo.action", {
                headers: {
                    Accept: "application/json;charset=UTF-8",
                },
                cookieJar,
            })
                .json();
        };
        this.userSign = () => {
            return this.fetchAPI(`https://cloud.189.cn/mkt/userSign.action?rand=${new Date().getTime()}&clientType=TELEANDROID&version=${config.version}&model=${config.model}`);
        };
        this.taskSign = () => {
            return this.fetchAPI("https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_SIGNIN&activityId=ACT_SIGNIN");
        };
        this.taskPhoto = () => {
            return this.fetchAPI("https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_2022_FLDFS_KJ&activityId=ACT_SIGNIN");
        };
        this.taskKJ = () => {
            return this.fetchAPI("https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_2022_FLDFS_KJ&activityId=ACT_SIGNIN");
        };
        this.getUserBriefInfo = () => got_1.default
            .get("https://cloud.189.cn/api/portal/v2/getUserBriefInfo.action", {
            cookieJar,
        })
            .json();
        this.getAccessTokenBySsKey = (sessionKey) => {
            const appkey = "600100422";
            const time = String(Date.now());
            const signature = __classPrivateFieldGet(this, _CloudClient_getSignature, "f").call(this, {
                sessionKey,
                Timestamp: time,
                AppKey: appkey,
            });
            return got_1.default
                .get(`https://cloud.189.cn/api/open/oauth2/getAccessTokenBySsKey.action?sessionKey=${sessionKey}`, {
                headers: {
                    "Sign-Type": "1",
                    Signature: signature,
                    Timestamp: time,
                    Appkey: appkey,
                },
                cookieJar,
            })
                .json();
        };
        this.fetchFamilyAPI = async (path) => {
            const { query } = url_1.default.parse(path, true);
            const time = String(Date.now());
            if (!__classPrivateFieldGet(this, _CloudClient_accessToken, "f")) {
                const { sessionKey } = await this.getUserBriefInfo();
                const { accessToken } = await this.getAccessTokenBySsKey(sessionKey);
                __classPrivateFieldSet(this, _CloudClient_accessToken, accessToken, "f");
            }
            const signature = __classPrivateFieldGet(this, _CloudClient_getSignature, "f").call(this, Object.assign(Object.assign({}, query), { Timestamp: time, AccessToken: __classPrivateFieldGet(this, _CloudClient_accessToken, "f") }));
            return got_1.default
                .get(path, {
                headers: {
                    "Sign-Type": "1",
                    Signature: signature,
                    Timestamp: time,
                    Accesstoken: __classPrivateFieldGet(this, _CloudClient_accessToken, "f"),
                    Accept: "application/json;charset=UTF-8",
                },
                cookieJar,
            })
                .json();
        };
        this.getFamilyList = () => this.fetchFamilyAPI("https://api.cloud.189.cn/open/family/manage/getFamilyList.action");
        this.familyUserSign = (familyId) => {
            const gturl = `https://api.cloud.189.cn/open/family/manage/exeFamilyUserSign.action?familyId=${familyId}`;
            return this.fetchFamilyAPI(gturl);
        };
        this.username = username;
        this.password = password;
    }
}
_CloudClient_accessToken = new WeakMap(), _CloudClient_builLoginForm = new WeakMap(), _CloudClient_sortParameter = new WeakMap(), _CloudClient_getSignature = new WeakMap();
exports.default = CloudClient;
